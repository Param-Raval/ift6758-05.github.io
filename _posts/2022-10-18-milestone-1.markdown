---
layout: post
title:  "Milestone 1"
date:   2022-10-18 16:00:35 -0400
categories: jekyll update
---
#  IFT6758 Batch 5 Milestone Project

## Data Acquisition 


### NHL API Usage

First, we need to understand how to download the data from the API.
Most importantly, we need the gameID, before we can request it
```
import json
import requests
def getGameData(gameID=gameID):
    endpoint = 'https://statsapi.web.nhl.com/api/v1/game/{}/feed/live/'.format(gameID)
    data = requests.get(endpoint).json()
    return data
```
### Structure of Game IDs

The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season).<br> 
The next 2 digits give the type of game, where:<br>
    01 = preseason,<br>
    02 = regular season,<br> 
    03 = playoffs,<br>
    04 = all-star.<br> 
The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams).
For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).

To construct the gameID, all we need to do is format that information, which we can then make a function for:
```
def getGameId(season, gameType,game)
    '''
    season: Represented by the year, i.e 2017 for the season 2017 - 2018

    gameType: Indicates the type of game for which you want the game ID for, where
        1 = preseason, 
        2 = regular season, 
        3 = playoffs,
        4 = all-star.

    game: Indicates the specific game number 
        For non playoff games:
            goes up from 1 to 1271 [if #teams == 31, only from 2017] or 1230 [if #teams == 30]
        Playoff games:
            let abcd be the game number where,
                b represents the round of playoffs
                c represents the matchup
                d specifies the game # out of 7
    '''
    gamePrefix = ''.join(['0'] * (4 - len(str(game))))
    return '{}0{}{}{}'.format(season, gameType, gamePrefix, game)
```

Now that we know the game ID, we can write a function that loops over the seasons and gametypes to create our dataset:
```
def getDataSet(options):
    for season in options['seasons']:
        if season < 2017:
            maxGames = 1230
        else:
            maxGames = 1271
        for game in range(1, maxGames):
            getGameData(getGameId(season, options['gameType'], game))
                    
```
We can now build the dataset by calling:
```
nhlData.getDataSet(options={
    'fromSeason': 2016,
    'toSeason': 2021,
    'gameType': 2,
    'max': 4
})
```


## Cleaning the Data

After saving all of the json data, we only need to work with a portion of it. As such, we will need to look at the parts that are interesting.

Looking at a sample game, we should probably keep track of the team ids, which are found like so:

```
game_id = game_data['gameData']['game']['pk']

# get team id for home and away teams
home_team_id = game_data['gameData']['teams']['home']['id']
away_team_id = game_data['gameData']['teams']['away']['id']

# get id for season in which game was played
game_season = game_data['gameData']['game']['season']

col_names_game_data = ['gameData/game/pk', 'gameData/teams/home/id', 'gameData/teams/away/id', 'gameData/game/season']
```

Since we care about the shots being made, we can them through the ```'livedata/plays/allplays'``` to find the shots.

Looking at each play, they looks something like this:

```
{'about': {'dateTime': '2016-10-12T23:19:59Z',
           'eventId': 8,
           'eventIdx': 9,
           'goals': {'away': 0, 'home': 0},
           'ordinalNum': '1st',
           'period': 1,
           'periodTime': '01:11',
           'periodTimeRemaining': '18:49',
           'periodType': 'REGULAR'},
 'coordinates': {'x': -77.0, 'y': 5.0},
 'players': [{'player': {'fullName': 'Mitchell Marner',
                         'id': 8478483,
                         'link': '/api/v1/people/8478483'},
              'playerType': 'Shooter'},
             {'player': {'fullName': 'Craig Anderson',
                         'id': 8467950,
                         'link': '/api/v1/people/8467950'},
              'playerType': 'Goalie'}],
 'result': {'description': 'Mitchell Marner Wrist Shot saved by Craig Anderson',
            'event': 'Shot',
            'eventCode': 'OTT8',
            'eventTypeId': 'SHOT',
            'secondaryType': 'Wrist Shot'},
 'team': {'id': 10,
          'link': '/api/v1/teams/10',
          'name': 'Toronto Maple Leafs',
          'triCode': 'TOR'}}
{'about': {'dateTime': '2016-10-12T23:29:09Z',
           'eventId': 27,
           'eventIdx': 43,
           'goals': {'away': 1, 'home': 0},
           'ordinalNum': '1st',
           'period': 1,
           'periodTime': '08:21',
           'periodTimeRemaining': '11:39',
           'periodType': 'REGULAR'},
 'coordinates': {'x': -70.0, 'y': 1.0},
 'players': [{'player': {'fullName': 'Auston Matthews',
                         'id': 8479318,
                         'link': '/api/v1/people/8479318'},
              'playerType': 'Scorer',
              'seasonTotal': 1},
             {'player': {'fullName': 'Zach Hyman',
                         'id': 8475786,
                         'link': '/api/v1/people/8475786'},
              'playerType': 'Assist',
              'seasonTotal': 1},
             {'player': {'fullName': 'William Nylander',
                         'id': 8477939,
                         'link': '/api/v1/people/8477939'},
              'playerType': 'Assist',
              'seasonTotal': 1},
             {'player': {'fullName': 'Craig Anderson',
                         'id': 8467950,
                         'link': '/api/v1/people/8467950'},
              'playerType': 'Goalie'}],
 'result': {'description': 'Auston Matthews (1) Wrist Shot, assists: Zach '
                           'Hyman (1), William Nylander (1)',
            'emptyNet': False,
            'event': 'Goal',
            'eventCode': 'OTT27',
            'eventTypeId': 'GOAL',
            'gameWinningGoal': False,
            'secondaryType': 'Wrist Shot',
            'strength': {'code': 'EVEN', 'name': 'Even'}},
 'team': {'id': 10,
          'link': '/api/v1/teams/10',
          'name': 'Toronto Maple Leafs',
          'triCode': 'TOR'}}
```

From here, we see we want the following fields for each play:

```
col_names_shots = ['about/dateTime', 'about/period', 'about/periodTime', 'about/periodType', 'coordinates', 'players', 
             'result/secondaryType', 'result/eventTypeId',
            'team/id', 'team/name', 'team/triCode']
col_names_goal = ['result/emptyNet', 'result/strength/code']
```

Since only goals will have some information, while shots that miss don't have the strength and emptyNet information.

Although strength is only there for the goals, and doesn't indicate the number of players on the ice, we can calculate this by looking at the penalties in every game. By looking at the timestamps and adding our handcrafted rulings, we can know how many players are on the ice at any given time, and hence play!

If we cared about some other features, such as turnover-goals, rebounds, shot-off-the-rush, we could look into adding some more information.

Turnovers:
- We could look at whether any goal was made after a giveaway and takeaway event was made.
Rebounds:
- We could add this by looking at whether or not the goal was made soon after a shot was made
Buzzer-beaters:
- By looking at the PERIOD-END events, we can know whether or not the shot was made close to when the buzzer was going to sound! Are teams better at scoring under the high-pressure environments?


Knowing these, we can now write a bit of code to turn the json data we downloaded into a pandas dataframe with the column names that we wanted!

|    |   Unnamed: 0 | about/dateTime       |   about/period | about/periodTime   | about/periodType   | coordinates              | players                                                                                                                                                                                                                                          | result/secondaryType   | result/eventTypeId   |   team/id | team/name             | team/triCode   |   result/emptyNet |   result/strength/code |   gameData/game/pk |   gameData/teams/home/id |   gameData/teams/away/id |   gameData/game/season |
|---:|-------------:|:---------------------|---------------:|:-------------------|:-------------------|:-------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------|:---------------------|----------:|:----------------------|:---------------|------------------:|-----------------------:|-------------------:|-------------------------:|-------------------------:|-----------------------:|
|  0 |            0 | 2019-04-12T23:12:05Z |              1 | 00:40              | REGULAR            | {'x': 38.0, 'y': 12.0}   | [{'player': {'id': 8475167, 'fullName': 'Victor Hedman', 'link': '/api/v1/people/8475167'}, 'playerType': 'Shooter'}, {'player': {'id': 8475683, 'fullName': 'Sergei Bobrovsky', 'link': '/api/v1/people/8475683'}, 'playerType': 'Goalie'}]     | Wrist Shot             | SHOT                 |        14 | Tampa Bay Lightning   | TBL            |               nan |                    nan |         2018030112 |                       14 |                       29 |               20182019 |
|  1 |            1 | 2019-04-12T23:12:51Z |              1 | 00:44              | REGULAR            | {'x': 36.0, 'y': 4.0}    | [{'player': {'id': 8479410, 'fullName': 'Mikhail Sergachev', 'link': '/api/v1/people/8479410'}, 'playerType': 'Shooter'}, {'player': {'id': 8475683, 'fullName': 'Sergei Bobrovsky', 'link': '/api/v1/people/8475683'}, 'playerType': 'Goalie'}] | Slap Shot              | SHOT                 |        14 | Tampa Bay Lightning   | TBL            |               nan |                    nan |         2018030112 |                       14 |                       29 |               20182019 |
|  2 |            2 | 2019-04-12T23:16:13Z |              1 | 02:59              | REGULAR            | {'x': -75.0, 'y': -20.0} | [{'player': {'id': 8474062, 'fullName': 'Riley Nash', 'link': '/api/v1/people/8474062'}, 'playerType': 'Shooter'}, {'player': {'id': 8476883, 'fullName': 'Andrei Vasilevskiy', 'link': '/api/v1/people/8476883'}, 'playerType': 'Goalie'}]      | Backhand               | SHOT                 |        29 | Columbus Blue Jackets | CBJ            |               nan |                    nan |         2018030112 |                       14 |                       29 |               20182019 |

Cleaning up the column names and making the data a bit more tidy (such as making the coordinate strings into floats), we get the following dataframe).


